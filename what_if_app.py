import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
st.set_page_config(page_title="–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", layout="centered")
# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
@st.cache_data
def load_and_train():
    df = pd.read_csv("clean_dataset.csv")

    X = df.drop(columns=["saleprice"])
    y = df["saleprice"]

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X, y)

    feature_importance = pd.DataFrame({
        'Feature': X.columns,
        'Importance': model.feature_importances_
    }).sort_values(by="Importance", ascending=False)

    return model, X, feature_importance


# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö ===
model, X, importance_df = load_and_train()

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ ===

st.title("üìä –û–Ω–ª–∞–π–Ω-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—ã –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
st.markdown("üìã –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –∏ —É–∑–Ω–∞–π—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ —Ç–∞–∫–æ–π –¥–æ–º –æ–±—ã—á–Ω–æ –ø—Ä–æ–¥–∞—ë—Ç—Å—è –Ω–∞ —Ä—ã–Ω–∫–µ.")

# === –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ===
feature_labels = {
    "overallqual": "–û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (1‚Äì10)",
    "grlivarea": "–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤. —Ñ—É—Ç—ã)",
    "totalbsmtsf": "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–¥–≤–∞–ª–∞ (–∫–≤. —Ñ—É—Ç—ã)",
    "2ndflrsf": "–ü–ª–æ—â–∞–¥—å –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–∂–∞ (–∫–≤. —Ñ—É—Ç—ã)",
    "bsmtfinsf1": "–ü–ª–æ—â–∞–¥—å –æ—Ç–¥–µ–ª–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–≤–∞–ª–∞ (–∫–≤. —Ñ—É—Ç—ã)",
    "1stflrsf": "–ü–ª–æ—â–∞–¥—å –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–∂–∞ (–∫–≤. —Ñ—É—Ç—ã)",
    "lotarea": "–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–∫–≤. —Ñ—É—Ç—ã)",
    "garagearea": "–ü–ª–æ—â–∞–¥—å –≥–∞—Ä–∞–∂–∞ (–∫–≤. —Ñ—É—Ç—ã)",
    "yearbuilt": "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏",
    "garagecars": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω–æ–º–µ—Å—Ç"
}

# === –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
preset_values = {
    "overallqual": 8,
    "grlivarea": 2000,
    "totalbsmtsf": 800,
    "2ndflrsf": 400,
    "bsmtfinsf1": 600,
    "1stflrsf": 1200,
    "lotarea": 9500,
    "garagearea": 400,
    "yearbuilt": 2015,
    "garagecars": 2
}

# === –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º ===
feature_ranges = {
    "overallqual":   {"min": 1,    "max": 10,   "step": 1,    "type": "int"},
    "grlivarea":     {"min": 100,  "max": 4000, "step": 10,   "type": "float"},
    "totalbsmtsf":   {"min": 0,    "max": 3000, "step": 10,   "type": "float"},
    "2ndflrsf":      {"min": 0,    "max": 2000, "step": 10,   "type": "float"},
    "bsmtfinsf1":    {"min": 0,    "max": 2000, "step": 10,   "type": "float"},
    "1stflrsf":      {"min": 100,  "max": 2500, "step": 10,   "type": "float"},
    "lotarea":       {"min": 1000, "max": 25000,"step": 100,  "type": "float"},
    "garagearea":    {"min": 0,    "max": 1500, "step": 10,   "type": "float"},
    "yearbuilt":     {"min": 1800, "max": 2025, "step": 1,    "type": "int"},
    "garagecars":    {"min": 0,    "max": 5,    "step": 1,    "type": "int"}
}

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
top_features = importance_df.head(10)['Feature']
sample = X.mean().to_dict()

# === –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
st.sidebar.header("üîß –í–≤–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")

for feature in top_features:
    if feature not in X.columns:
        continue

    label = feature_labels.get(feature.lower(), feature)
    default = preset_values.get(feature.lower(), float(sample[feature]))
    fr = feature_ranges.get(feature.lower(), {"min": 0, "max": 10000, "step": 1, "type": "float"})

    if fr["type"] == "int":
        sample[feature] = st.sidebar.number_input(
            label,
            min_value=int(fr["min"]),
            max_value=int(fr["max"]),
            step=int(fr["step"]),
            value=int(round(default)),
            key=feature
        )
    else:
        sample[feature] = st.sidebar.number_input(
            label,
            min_value=float(fr["min"]),
            max_value=float(fr["max"]),
            step=float(fr["step"]),
            value=float(default),
            key=feature
        )

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ ===
input_df = pd.DataFrame([sample])
price = model.predict(input_df)[0]

st.markdown("---")
st.markdown("### üí∞ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞:")
st.success(f"**‚âà {price:,.0f} USD**")
top10 = importance_df.head(10).sort_values(by="Importance")

# === –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è / —Å–æ–≤–µ—Ç—ã ===
with st.expander("‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?"):
    st.markdown("""
    - –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –¥–æ–º–∞ —Å–ª–µ–≤–∞
    - –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –ø–æ–¥ —Å–µ–±—è
    - –ù–∏—á–µ–≥–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    - –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ü–µ–Ω—É —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ ‚Äî –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ –Ω–∏–∂–µ
    """)

# === –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ ===
with st.expander("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å"):
    labels = [feature_labels.get(f.lower(), f) for f in top10['Feature']]

    fig, ax = plt.subplots()
    ax.barh(labels, top10['Importance'], color='green')
    ax.set_title("–¢–æ–ø-10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —Ü–µ–Ω—É")
    ax.set_xlabel("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∞")
    st.pyplot(fig)



st.markdown("---")
st.caption("üìò–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª–µ–µ 1400 —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –¥–æ–º–∞. –ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö House Prices (Kaggle).")

# === –§—É—Ç–µ—Ä ===
st.markdown("""
<hr style="border:1px solid gray">

<p style='text-align: center; font-size: 0.85em; color: gray;'>
–°–æ–∑–¥–∞—Ç–µ–ª–∏: –®–∞—Ç—Ä–∞–≤—Å–∫–∏–π –ù–∏–∫–∏—Ç–∞ –î–º–∏—Ç—Ä–∏–µ–≤–∏—á, –ì–æ—Ä—à–∫–æ–≤ –ê–Ω–¥—Ä–µ–π –ú–∞–∫—Å–∏–º–æ–≤–∏—á<br>
–ì—Ä—É–ø–ø–∞ –§–ë–ò-33, –ù–ì–¢–£, 2025 –≥.<br>
–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã ¬©
</p>
""", unsafe_allow_html=True)

